@page
@{
    ViewData["Title"] = "Home";
}

<div id="app">

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Classes</h5>
            <a href="#" class="btn btn-success" v-on:click="showClassAddModal"> Add ...</a>
        </div>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Location</th>
                    <th>Teacher</th>
                    <th></th>
                </tr>
            </thead>
            <tr v-for="(item,index) in classes" v-on:click="getStudents(item)" style="cursor:pointer">
                <td>{{index+1}}</td>
                <td>{{item.name}}</td>
                <td>{{item.location}}</td>
                <td>{{item.teacher}}</td>
                <td>
                    <a href="#" class="btn btn-danger" v-on:click="removeClass(item,index)">Remove</a>
                    <a href="#" class="btn btn-primary" v-on:click="editClass(item,index)">Edit</a>
                </td>
            </tr>
        </table>
    </div>
    <br />
    <div class="card" v-show="selectedClass.name!=null">
        <div class="card-body">

            <h5 class="card-title">
                {{selectedClass.name}}
            </h5>

            <a href="#" class="btn btn-success" v-on:click="showStudentAddModal"> Add ...</a>

            <div v-if="students.length<=0">
                <p>No students found!</p>
            </div>

        </div>

        <table class="table" v-if="students.length>0">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Age</th>
                    <th>GPA</th>
                    <th></th>
                </tr>
            </thead>
            <tr v-for="(student,index) in students" v-bind:class="{ 'bg-success text-white': student.gpa>3.2 }">
                <td>{{index+1}}</td>
                <td>{{student.name}}</td>
                <td>{{student.age}}</td>
                <td>{{student.gpa}}</td>
                <td>
                    <a href="#" class="btn btn-danger" v-on:click="removeStudent(student,index)">Remove</a>
                    <a href="#" class="btn btn-primary" v-on:click="editStudent(student,index)">Edit</a>

                </td>
            </tr>
        </table>

    </div>

    <!-- Student Modal -->
    <div class="modal fade" id="addStudent" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Student</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="form-group">
                        <label for="name">Name</label>
                        <input v-model="studentName" type="text" class="form-control" style="width:100%">
                    </div>
                    <div class="form-group">
                        <label>Age</label>
                        <input v-model="studentAge" type="text" class="form-control" style="width:100%">
                    </div>
                    <div class="form-group">
                        <label>GPA</label>
                        <input v-model="studentGpa" type="text" class="form-control" style="width:100%">
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="saveStudentChanges">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Class Modal -->
    <div class="modal fade" id="addClass" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Class</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="form-group">
                        <label for="name">Name</label>
                        <input v-model="className" type="text" class="form-control" style="width:100%">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Location</label>
                        <input v-model="classLocation" type="text" class="form-control" style="width:100%">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Teacher</label>
                        <input v-model="classTeacher" type="text" class="form-control" style="width:100%">
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="saveClassChanges">Save changes</button>
                </div>
            </div>
        </div>
    </div>


</div>

@section scripts{

    <script>
        var app = new Vue({
            el: "#app",
            data: {
                classes: [],

                classId: null,
                classIndex: null,
                className: "",
                classLocation: "",
                classTeacher: "",

                classMode: "add",

                selectedClass: {},

                students: [],
                studentName: "",
                studentAge: "",
                studentGpa: "",
                studentIndex:null,
                studentMode: "add"

            },
            created: function () {
                this.getClasses();

            },
            methods: {

                saveStudentChanges: function () {
                    if (this.studentMode == "add") {
                        this.addStudent();
                    } else {
                        this.updateStudent();
                    }
                },

                showStudentAddModal: function () {
                    studnetMode: "add";
                    $('#addStudent').modal('show');
                },
                updateStudent: function () {
                    var vm = this;

                    var existingStudent = {
                        classId: vm.classId,
                        name: vm.studentName,
                        age: vm.studentAge,
                        gpa: vm.studentGpa

                    }

                    $.ajax({ url: "/api/student", data: existingStudent, method: "PUT" })
                        .done(function () {
                            vm.students[vm.studentIndex].name = vm.studentName;
                            vm.students[vm.studentIndex].age = vm.studentAge;
                            vm.students[vm.studentIndex].gpa = vm.studentGpa;

                            toastr.success("Student updated.");
                        }).fail(function (error) {
                            toastr.error(error.responseText);
                        }).always(function () {
                            vm.clearData();
                        });

                    $('#addStudent').modal('hide');
                },
                editStudent: function (student,index) {
                    this.studentName = student.name;
                    this.studentAge = student.age;
                    this.studentGpa= student.gpa;
                    this.studentIndex = index;
                    this.studentMode = "edit";

                    $('#addStudent').modal('show');

                },
                removeStudent: function (student,index) {
                    var sure = confirm('Are you sure?');
                    if (!sure) {
                        return;
                    };

                    var vm = this;
                    var existingStudent = {
                        classId: student.classId,
                        name: student.name,
                    }

                    $.ajax({ url: "/api/student", data: existingStudent, method: "DELETE" })
                        .done(function (data) {
                            vm.students.splice(index, 1);
                            toastr.success("Student removed.");
                            
                        }).fail(function () {
                            toastr.error("Can not remove student");
                        });
                },
                addStudent: function () {
                    var vm = this;

                    var newStudent = {
                        classId: vm.classId,
                        name: vm.studentName,
                        age: vm.studentAge,
                        gpa: vm.studentGpa
                    }

                    $.ajax({ url: "/api/student", data: newStudent, method: "POST" })
                        .done(function (data) {
                            newStudent.id = data.id;
                            vm.students.splice(0, 0, newStudent);
                            toastr.success("New student created.");
                        }).fail(function (error) {
                            toastr.error(error.responseText);
                        }).always(function () {
                            vm.clearData();
                        });

                    this.clearData();

                    $('#addStudent').modal('hide');

                },
                getStudents: function (item) {
                    var vm = this;
                    vm.selectedClass = item;
                    vm.classId = item.id;

                    $.ajax({ url: "/api/student/" + item.id, method: "GET" })
                        .done(function (data) {
                            vm.students = data;
                        }).fail(function () {
                            toastr.error("Can not load students!");
                        });
                },
                showClassAddModal: function () {
                    classMode = "add";
                    $('#addClass').modal('show');
                },
                editClass: function (item, index) {

                    this.className = item.name;
                    this.classLocation = item.location;
                    this.classTeacher = item.teacher;

                    this.classIndex = index;
                    this.classId = item.id;

                    this.classMode = "edit";

                    $('#addClass').modal('show');
                },
                removeClass: function (item, index) {
                    var vm = this;

                    var classToDelete = {
                        id: item.id
                    }

                    $.ajax({ url: "/api/class", data: classToDelete, method: "DELETE" })
                        .done(function (data) {
                            vm.classes.splice(index, 1);
                            toastr.success("class removed");
                        }).fail(function () {
                            toastr.error("Can not remove this class!");
                        });
                },
                saveClassChanges: function () {
                    if (this.classMode == "add") {
                        this.addClass();
                    } else {
                        this.updateClass()
                    }
                },
                updateClass: function () {
                    var vm = this;

                    var existingClass = {
                        id: vm.classId,
                        name: vm.className,
                        location: vm.classLocation,
                        teacher: vm.classTeacher

                    }

                    $.ajax({ url: "/api/class", data: existingClass, method: "PUT" })
                        .done(function () {
                            vm.classes[vm.classIndex].name = vm.className;
                            vm.classes[vm.classIndex].location = vm.classLocation;
                            vm.classes[vm.classIndex].teacher = vm.classTeacher;

                            toastr.success("Class updated.");
                        }).fail(function () {
                            toastr.error("Can not update this class.");
                        }).always(function () {
                            vm.clearData();
                        });

                    $('#addClass').modal('hide');
                },
                addClass: function () {
                    var vm = this;

                    var newClass = {
                        name: vm.className,
                        location: vm.classLocation,
                        teacher: vm.classTeacher
                    }

                    $.ajax({ url: "/api/class", data: newClass, method: "POST" })
                        .done(function (data) {
                            newClass.id = data.id;
                            vm.classes.splice(0, 0, newClass);
                            toastr.success("New class created.");
                        }).fail(function () {
                            toastr.error("Can not add new class!");
                        }).always(function () {
                            vm.clearData();
                        });

                    $('#addClass').modal('hide');

                },
                getClasses: function () {
                    var vm = this;
                    $.ajax({ url: "/api/class", method: "GET" })
                        .done(function (data) {
                            vm.classes = data;
                        }).fail(function () {
                            toastr.error("Cannot load classes!");
                        });
                },
                clearData: function () {
                    var vm = this;
                    vm.className = "";
                    vm.classLocation = "";
                    vm.classTeacher = "";
                    vm.studentName = "";
                    vm.studentAge = "";
                    vm.studentGpa = "";
                    //vm.classId = null;

                }
            }


        });
    </script>

}

